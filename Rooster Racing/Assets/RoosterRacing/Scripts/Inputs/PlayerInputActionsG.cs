//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/RoosterRacing/Scripts/Inputs/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerActionMap"",
            ""id"": ""37cd02aa-0dac-4ecf-9a39-62db49bdc6e0"",
            ""actions"": [
                {
                    ""name"": ""right"",
                    ""type"": ""Button"",
                    ""id"": ""bfc632a3-9f99-4261-84f5-c7eea7e02509"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""left"",
                    ""type"": ""Button"",
                    ""id"": ""437b493e-ac52-4cd2-8d62-a0a26878374f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""accelerate"",
                    ""type"": ""Button"",
                    ""id"": ""9df5fdb2-3e4a-435b-a061-5bf28685baa8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pause"",
                    ""type"": ""Button"",
                    ""id"": ""47f39a18-95a6-407b-bab2-a0bfe7426d35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""power"",
                    ""type"": ""Button"",
                    ""id"": ""44d0489f-ca09-4b63-a233-2547a62a4800"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""1c4ed2e1-d5ae-4d00-8af7-440189cb803a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""lookBack"",
                    ""type"": ""Button"",
                    ""id"": ""f46b34d9-7ecc-411c-a257-3f2062fa2727"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d8e4c84-8cc2-4944-bb1f-48f41a3210c1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0f1704a-4d8c-45d1-8bca-e98b5686715f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fde5a5a-de0a-4cd0-978c-6c036e4d4d80"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d84542d-d615-4cb0-a653-3efb8eb7dff2"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a04bd45-82bc-4c76-8701-0f52acd25189"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e41256f4-0331-4246-847f-ff4ae7bead52"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e236ba15-a2ed-439b-934d-dbbfb7cc4100"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5da84ca1-3303-4830-8fc7-913b5526eb60"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""power"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2afd6537-3875-4187-822c-4841f3b00e9f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""543c7084-e27d-4a5f-a4d3-90c9f7dd8c01"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""lookBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuActionMap"",
            ""id"": ""e5be24a9-4138-477e-9ec0-ee9033372c5f"",
            ""actions"": [
                {
                    ""name"": ""goBack"",
                    ""type"": ""Button"",
                    ""id"": ""8ca46250-bfaa-4abd-9cee-fdd8eb7058e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5ee05fce-87e7-4c5c-9dae-7d287dce4994"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""goBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // PlayerActionMap
        m_PlayerActionMap = asset.FindActionMap("PlayerActionMap", throwIfNotFound: true);
        m_PlayerActionMap_right = m_PlayerActionMap.FindAction("right", throwIfNotFound: true);
        m_PlayerActionMap_left = m_PlayerActionMap.FindAction("left", throwIfNotFound: true);
        m_PlayerActionMap_accelerate = m_PlayerActionMap.FindAction("accelerate", throwIfNotFound: true);
        m_PlayerActionMap_pause = m_PlayerActionMap.FindAction("pause", throwIfNotFound: true);
        m_PlayerActionMap_power = m_PlayerActionMap.FindAction("power", throwIfNotFound: true);
        m_PlayerActionMap_jump = m_PlayerActionMap.FindAction("jump", throwIfNotFound: true);
        m_PlayerActionMap_lookBack = m_PlayerActionMap.FindAction("lookBack", throwIfNotFound: true);
        // MenuActionMap
        m_MenuActionMap = asset.FindActionMap("MenuActionMap", throwIfNotFound: true);
        m_MenuActionMap_goBack = m_MenuActionMap.FindAction("goBack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActionMap
    private readonly InputActionMap m_PlayerActionMap;
    private IPlayerActionMapActions m_PlayerActionMapActionsCallbackInterface;
    private readonly InputAction m_PlayerActionMap_right;
    private readonly InputAction m_PlayerActionMap_left;
    private readonly InputAction m_PlayerActionMap_accelerate;
    private readonly InputAction m_PlayerActionMap_pause;
    private readonly InputAction m_PlayerActionMap_power;
    private readonly InputAction m_PlayerActionMap_jump;
    private readonly InputAction m_PlayerActionMap_lookBack;
    public struct PlayerActionMapActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActionMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @right => m_Wrapper.m_PlayerActionMap_right;
        public InputAction @left => m_Wrapper.m_PlayerActionMap_left;
        public InputAction @accelerate => m_Wrapper.m_PlayerActionMap_accelerate;
        public InputAction @pause => m_Wrapper.m_PlayerActionMap_pause;
        public InputAction @power => m_Wrapper.m_PlayerActionMap_power;
        public InputAction @jump => m_Wrapper.m_PlayerActionMap_jump;
        public InputAction @lookBack => m_Wrapper.m_PlayerActionMap_lookBack;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionMapActions instance)
        {
            if (m_Wrapper.m_PlayerActionMapActionsCallbackInterface != null)
            {
                @right.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnRight;
                @right.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnRight;
                @right.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnRight;
                @left.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnLeft;
                @left.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnLeft;
                @left.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnLeft;
                @accelerate.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnAccelerate;
                @accelerate.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnAccelerate;
                @accelerate.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnAccelerate;
                @pause.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPause;
                @pause.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPause;
                @pause.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPause;
                @power.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPower;
                @power.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPower;
                @power.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnPower;
                @jump.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnJump;
                @jump.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnJump;
                @jump.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnJump;
                @lookBack.started -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnLookBack;
                @lookBack.performed -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnLookBack;
                @lookBack.canceled -= m_Wrapper.m_PlayerActionMapActionsCallbackInterface.OnLookBack;
            }
            m_Wrapper.m_PlayerActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @right.started += instance.OnRight;
                @right.performed += instance.OnRight;
                @right.canceled += instance.OnRight;
                @left.started += instance.OnLeft;
                @left.performed += instance.OnLeft;
                @left.canceled += instance.OnLeft;
                @accelerate.started += instance.OnAccelerate;
                @accelerate.performed += instance.OnAccelerate;
                @accelerate.canceled += instance.OnAccelerate;
                @pause.started += instance.OnPause;
                @pause.performed += instance.OnPause;
                @pause.canceled += instance.OnPause;
                @power.started += instance.OnPower;
                @power.performed += instance.OnPower;
                @power.canceled += instance.OnPower;
                @jump.started += instance.OnJump;
                @jump.performed += instance.OnJump;
                @jump.canceled += instance.OnJump;
                @lookBack.started += instance.OnLookBack;
                @lookBack.performed += instance.OnLookBack;
                @lookBack.canceled += instance.OnLookBack;
            }
        }
    }
    public PlayerActionMapActions @PlayerActionMap => new PlayerActionMapActions(this);

    // MenuActionMap
    private readonly InputActionMap m_MenuActionMap;
    private IMenuActionMapActions m_MenuActionMapActionsCallbackInterface;
    private readonly InputAction m_MenuActionMap_goBack;
    public struct MenuActionMapActions
    {
        private @PlayerInputActions m_Wrapper;
        public MenuActionMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @goBack => m_Wrapper.m_MenuActionMap_goBack;
        public InputActionMap Get() { return m_Wrapper.m_MenuActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActionMapActions instance)
        {
            if (m_Wrapper.m_MenuActionMapActionsCallbackInterface != null)
            {
                @goBack.started -= m_Wrapper.m_MenuActionMapActionsCallbackInterface.OnGoBack;
                @goBack.performed -= m_Wrapper.m_MenuActionMapActionsCallbackInterface.OnGoBack;
                @goBack.canceled -= m_Wrapper.m_MenuActionMapActionsCallbackInterface.OnGoBack;
            }
            m_Wrapper.m_MenuActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @goBack.started += instance.OnGoBack;
                @goBack.performed += instance.OnGoBack;
                @goBack.canceled += instance.OnGoBack;
            }
        }
    }
    public MenuActionMapActions @MenuActionMap => new MenuActionMapActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerActionMapActions
    {
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnAccelerate(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnPower(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLookBack(InputAction.CallbackContext context);
    }
    public interface IMenuActionMapActions
    {
        void OnGoBack(InputAction.CallbackContext context);
    }
}
